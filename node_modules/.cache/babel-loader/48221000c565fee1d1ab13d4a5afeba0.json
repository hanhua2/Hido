{"ast":null,"code":"/*!\nFullCalendar v5.10.1\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/\nimport './main.css';\nimport { getUniqueDomId, getDateMeta, buildNavLinkAttrs, getDayClassNames, createElement, RenderHook, formatDayString, BaseComponent, Fragment, createFormatter, EventRoot, getSegAnchorAttrs, isMultiDayRange, buildSegTimeText, memoize, ViewRoot, Scroller, NowTimer, sortEventSegs, getSegMeta, sliceEventStore, intersectRanges, DateComponent, startOfDay, addDays, identity, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\n\nvar ListViewHeaderRow =\n/** @class */\nfunction (_super) {\n  __extends(ListViewHeaderRow, _super);\n\n  function ListViewHeaderRow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      textId: getUniqueDomId()\n    };\n    return _this;\n  }\n\n  ListViewHeaderRow.prototype.render = function () {\n    var _a = this.context,\n        theme = _a.theme,\n        dateEnv = _a.dateEnv,\n        options = _a.options,\n        viewApi = _a.viewApi;\n    var _b = this.props,\n        cellId = _b.cellId,\n        dayDate = _b.dayDate,\n        todayRange = _b.todayRange;\n    var textId = this.state.textId;\n    var dayMeta = getDateMeta(dayDate, todayRange); // will ever be falsy?\n\n    var text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : ''; // will ever be falsy? also, BAD NAME \"alt\"\n\n    var sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : '';\n\n    var hookProps = __assign({\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      textId: textId,\n      text: text,\n      sideText: sideText,\n      navLinkAttrs: buildNavLinkAttrs(this.context, dayDate),\n      sideNavLinkAttrs: buildNavLinkAttrs(this.context, dayDate, 'day', false)\n    }, dayMeta);\n\n    var classNames = ['fc-list-day'].concat(getDayClassNames(dayMeta, theme)); // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.dayHeaderClassNames,\n      content: options.dayHeaderContent,\n      defaultContent: renderInnerContent,\n      didMount: options.dayHeaderDidMount,\n      willUnmount: options.dayHeaderWillUnmount\n    }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n      return createElement(\"tr\", {\n        ref: rootElRef,\n        className: classNames.concat(customClassNames).join(' '),\n        \"data-date\": formatDayString(dayDate)\n      }, createElement(\"th\", {\n        scope: \"colgroup\",\n        colSpan: 3,\n        id: cellId,\n        \"aria-labelledby\": textId\n      }, createElement(\"div\", {\n        className: 'fc-list-day-cushion ' + theme.getClass('tableCellShaded'),\n        ref: innerElRef\n      }, innerContent)));\n    });\n  };\n\n  return ListViewHeaderRow;\n}(BaseComponent);\n\nfunction renderInnerContent(props) {\n  return createElement(Fragment, null, props.text && createElement(\"a\", __assign({\n    id: props.textId,\n    className: \"fc-list-day-text\"\n  }, props.navLinkAttrs), props.text), props.sideText &&\n  /* not keyboard tabbable */\n  createElement(\"a\", __assign({\n    \"aria-hidden\": true,\n    className: \"fc-list-day-side-text\"\n  }, props.sideNavLinkAttrs), props.sideText));\n}\n\nvar DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short'\n});\n\nvar ListViewEventRow =\n/** @class */\nfunction (_super) {\n  __extends(ListViewEventRow, _super);\n\n  function ListViewEventRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ListViewEventRow.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var seg = props.seg,\n        timeHeaderId = props.timeHeaderId,\n        eventHeaderId = props.eventHeaderId,\n        dateHeaderId = props.dateHeaderId;\n    var timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT;\n    return createElement(EventRoot, {\n      seg: seg,\n      timeText: \"\" // BAD. because of all-day content\n      ,\n      disableDragging: true,\n      disableResizing: true,\n      defaultContent: function () {\n        return renderEventInnerContent(seg, context);\n      }\n      /* weird */\n      ,\n      isPast: props.isPast,\n      isFuture: props.isFuture,\n      isToday: props.isToday,\n      isSelected: props.isSelected,\n      isDragging: props.isDragging,\n      isResizing: props.isResizing,\n      isDateSelecting: props.isDateSelecting\n    }, function (rootElRef, classNames, innerElRef, innerContent, hookProps) {\n      return createElement(\"tr\", {\n        className: ['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' '),\n        ref: rootElRef\n      }, buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId), createElement(\"td\", {\n        \"aria-hidden\": true,\n        className: \"fc-list-event-graphic\"\n      }, createElement(\"span\", {\n        className: \"fc-list-event-dot\",\n        style: {\n          borderColor: hookProps.borderColor || hookProps.backgroundColor\n        }\n      })), createElement(\"td\", {\n        ref: innerElRef,\n        headers: eventHeaderId + \" \" + dateHeaderId,\n        className: \"fc-list-event-title\"\n      }, innerContent));\n    });\n  };\n\n  return ListViewEventRow;\n}(BaseComponent);\n\nfunction renderEventInnerContent(seg, context) {\n  var interactiveAttrs = getSegAnchorAttrs(seg, context);\n  return createElement(\"a\", __assign({}, interactiveAttrs), seg.eventRange.def.title);\n}\n\nfunction buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId) {\n  var options = context.options;\n\n  if (options.displayEventTime !== false) {\n    var eventDef = seg.eventRange.def;\n    var eventInstance = seg.eventRange.instance;\n    var doAllDay = false;\n    var timeText = void 0;\n\n    if (eventDef.allDay) {\n      doAllDay = true;\n    } else if (isMultiDayRange(seg.eventRange.range)) {\n      // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, eventInstance.range.start, seg.end);\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, seg.start, eventInstance.range.end);\n      } else {\n        doAllDay = true;\n      }\n    } else {\n      timeText = buildSegTimeText(seg, timeFormat, context);\n    }\n\n    if (doAllDay) {\n      var hookProps = {\n        text: context.options.allDayText,\n        view: context.viewApi\n      };\n      return createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: options.allDayClassNames,\n        content: options.allDayContent,\n        defaultContent: renderAllDayInner,\n        didMount: options.allDayDidMount,\n        willUnmount: options.allDayWillUnmount\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"td\", {\n          ref: rootElRef,\n          headers: timeHeaderId + \" \" + dateHeaderId,\n          className: ['fc-list-event-time'].concat(classNames).join(' ')\n        }, innerContent);\n      });\n    }\n\n    return createElement(\"td\", {\n      className: \"fc-list-event-time\"\n    }, timeText);\n  }\n\n  return null;\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text;\n}\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\n\n\nvar ListView =\n/** @class */\nfunction (_super) {\n  __extends(ListView, _super);\n\n  function ListView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.computeDateVars = memoize(computeDateVars);\n    _this.eventStoreToSegs = memoize(_this._eventStoreToSegs);\n    _this.state = {\n      timeHeaderId: getUniqueDomId(),\n      eventHeaderId: getUniqueDomId(),\n      dateHeaderIdRoot: getUniqueDomId()\n    };\n\n    _this.setRootEl = function (rootEl) {\n      if (rootEl) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: rootEl\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n\n    return _this;\n  }\n\n  ListView.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var extraClassNames = ['fc-list', context.theme.getClass('table'), context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : ''];\n\n    var _b = this.computeDateVars(props.dateProfile),\n        dayDates = _b.dayDates,\n        dayRanges = _b.dayRanges;\n\n    var eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges);\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.setRootEl\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: extraClassNames.concat(classNames).join(' ')\n      }, createElement(Scroller, {\n        liquid: !props.isHeightAuto,\n        overflowX: props.isHeightAuto ? 'visible' : 'hidden',\n        overflowY: props.isHeightAuto ? 'visible' : 'auto'\n      }, eventSegs.length > 0 ? _this.renderSegList(eventSegs, dayDates) : _this.renderEmptyMessage()));\n    });\n  };\n\n  ListView.prototype.renderEmptyMessage = function () {\n    var _a = this.context,\n        options = _a.options,\n        viewApi = _a.viewApi;\n    var hookProps = {\n      text: options.noEventsText,\n      view: viewApi\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.noEventsClassNames,\n      content: options.noEventsContent,\n      defaultContent: renderNoEventsInner,\n      didMount: options.noEventsDidMount,\n      willUnmount: options.noEventsWillUnmount\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"div\", {\n        className: ['fc-list-empty'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(\"div\", {\n        className: \"fc-list-empty-cushion\",\n        ref: innerElRef\n      }, innerContent));\n    });\n  };\n\n  ListView.prototype.renderSegList = function (allSegs, dayDates) {\n    var _a = this.context,\n        theme = _a.theme,\n        options = _a.options;\n    var _b = this.state,\n        timeHeaderId = _b.timeHeaderId,\n        eventHeaderId = _b.eventHeaderId,\n        dateHeaderIdRoot = _b.dateHeaderIdRoot;\n    var segsByDay = groupSegsByDay(allSegs); // sparse array\n\n    return createElement(NowTimer, {\n      unit: \"day\"\n    }, function (nowDate, todayRange) {\n      var innerNodes = [];\n\n      for (var dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n        var daySegs = segsByDay[dayIndex];\n\n        if (daySegs) {\n          // sparse array, so might be undefined\n          var dayStr = formatDayString(dayDates[dayIndex]);\n          var dateHeaderId = dateHeaderIdRoot + '-' + dayStr; // append a day header\n\n          innerNodes.push(createElement(ListViewHeaderRow, {\n            key: dayStr,\n            cellId: dateHeaderId,\n            dayDate: dayDates[dayIndex],\n            todayRange: todayRange\n          }));\n          daySegs = sortEventSegs(daySegs, options.eventOrder);\n\n          for (var _i = 0, daySegs_1 = daySegs; _i < daySegs_1.length; _i++) {\n            var seg = daySegs_1[_i];\n            innerNodes.push(createElement(ListViewEventRow, __assign({\n              key: dayStr + ':' + seg.eventRange.instance.instanceId\n              /* are multiple segs for an instanceId */\n              ,\n              seg: seg,\n              isDragging: false,\n              isResizing: false,\n              isDateSelecting: false,\n              isSelected: false,\n              timeHeaderId: timeHeaderId,\n              eventHeaderId: eventHeaderId,\n              dateHeaderId: dateHeaderId\n            }, getSegMeta(seg, todayRange, nowDate))));\n          }\n        }\n      }\n\n      return createElement(\"table\", {\n        className: 'fc-list-table ' + theme.getClass('table')\n      }, createElement(\"thead\", null, createElement(\"tr\", null, createElement(\"th\", {\n        scope: \"col\",\n        id: timeHeaderId\n      }, options.timeHint), createElement(\"th\", {\n        scope: \"col\",\n        \"aria-hidden\": true\n      }), createElement(\"th\", {\n        scope: \"col\",\n        id: eventHeaderId\n      }, options.eventHint))), createElement(\"tbody\", null, innerNodes));\n    });\n  };\n\n  ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {\n    return this.eventRangesToSegs(sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.options.nextDayThreshold).fg, dayRanges);\n  };\n\n  ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {\n    var segs = [];\n\n    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n      var eventRange = eventRanges_1[_i];\n      segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));\n    }\n\n    return segs;\n  };\n\n  ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {\n    var dateEnv = this.context.dateEnv;\n    var nextDayThreshold = this.context.options.nextDayThreshold;\n    var range = eventRange.range;\n    var allDay = eventRange.def.allDay;\n    var dayIndex;\n    var segRange;\n    var seg;\n    var segs = [];\n\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex]);\n\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange: eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex: dayIndex\n        };\n        segs.push(seg); // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n\n        if (!seg.isEnd && !allDay && dayIndex + 1 < dayRanges.length && range.end < dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\n          seg.end = range.end;\n          seg.isEnd = true;\n          break;\n        }\n      }\n    }\n\n    return segs;\n  };\n\n  return ListView;\n}(DateComponent);\n\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text;\n}\n\nfunction computeDateVars(dateProfile) {\n  var dayStart = startOfDay(dateProfile.renderRange.start);\n  var viewEnd = dateProfile.renderRange.end;\n  var dayDates = [];\n  var dayRanges = [];\n\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart);\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1)\n    });\n    dayStart = addDays(dayStart, 1);\n  }\n\n  return {\n    dayDates: dayDates,\n    dayRanges: dayRanges\n  };\n} // Returns a sparse array of arrays, segs grouped by their dayIndex\n\n\nfunction groupSegsByDay(segs) {\n  var segsByDay = []; // sparse array\n\n  var i;\n  var seg;\n\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);\n  }\n\n  return segsByDay;\n}\n\nvar OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter,\n  listDaySideFormat: createFalsableFormatter,\n  noEventsClassNames: identity,\n  noEventsContent: identity,\n  noEventsDidMount: identity,\n  noEventsWillUnmount: identity // noEventsText is defined in base options\n\n};\n\nfunction createFalsableFormatter(input) {\n  return input === false ? null : createFormatter(input);\n}\n\nvar main = createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    list: {\n      component: ListView,\n      buttonTextKey: 'list',\n      listDayFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      } // like \"January 1, 2016\"\n\n    },\n    listDay: {\n      type: 'list',\n      duration: {\n        days: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      } // day-of-week is all we need. full date is probably in headerToolbar\n\n    },\n    listWeek: {\n      type: 'list',\n      duration: {\n        weeks: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      },\n      listDaySideFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    listMonth: {\n      type: 'list',\n      duration: {\n        month: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      } // day-of-week is nice-to-have\n\n    },\n    listYear: {\n      type: 'list',\n      duration: {\n        year: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      } // day-of-week is nice-to-have\n\n    }\n  }\n});\nexport default main;\nexport { ListView };","map":{"version":3,"mappings":"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","names":["__extends","_this","textId","getUniqueDomId","ListViewHeaderRow","context","theme","dateEnv","options","viewApi","props","cellId","dayDate","todayRange","state","dayMeta","getDateMeta","text","listDayFormat","format","sideText","listDaySideFormat","hookProps","date","toDate","view","navLinkAttrs","buildNavLinkAttrs","sideNavLinkAttrs","classNames","concat","getDayClassNames","createElement","RenderHook","dayHeaderClassNames","content","dayHeaderContent","defaultContent","renderInnerContent","didMount","dayHeaderDidMount","willUnmount","dayHeaderWillUnmount","rootElRef","customClassNames","innerElRef","innerContent","ref","className","join","formatDayString","scope","colSpan","id","getClass","BaseComponent","Fragment","DEFAULT_TIME_FORMAT","createFormatter","hour","minute","meridiem","ListViewEventRow","timeHeaderId","eventHeaderId","dateHeaderId","timeFormat","eventTimeFormat","EventRoot","seg","timeText","disableDragging","disableResizing","isPast","isFuture","isToday","isSelected","isDragging","isResizing","isDateSelecting","event","url","buildTimeContent","style","borderColor","backgroundColor","headers","renderEventInnerContent","interactiveAttrs","getSegAnchorAttrs","eventRange","def","title","displayEventTime","eventDef","eventInstance","instance","doAllDay","allDay","isMultiDayRange","range","isStart","buildSegTimeText","start","end","isEnd","allDayText","allDayClassNames","allDayContent","renderAllDayInner","allDayDidMount","allDayWillUnmount","memoize","computeDateVars","_eventStoreToSegs","dateHeaderIdRoot","rootEl","registerInteractiveComponent","el","unregisterInteractiveComponent","ListView","extraClassNames","stickyHeaderDates","dateProfile","dayDates","dayRanges","eventSegs","eventStoreToSegs","eventStore","eventUiBases","ViewRoot","viewSpec","elRef","setRootEl","Scroller","liquid","isHeightAuto","overflowX","overflowY","length","renderSegList","renderEmptyMessage","noEventsText","noEventsClassNames","noEventsContent","renderNoEventsInner","noEventsDidMount","noEventsWillUnmount","allSegs","segsByDay","groupSegsByDay","NowTimer","unit","nowDate","innerNodes","dayIndex","daySegs","dayStr","push","key","sortEventSegs","eventOrder","_i","__assign","instanceId","getSegMeta","timeHint","eventHint","eventRangesToSegs","sliceEventStore","activeRange","nextDayThreshold","fg","eventRanges","segs","apply","eventRangeToSegs","segRange","intersectRanges","component","valueOf","add","DateComponent","dayStart","startOfDay","renderRange","viewEnd","addDays","i","OPTION_REFINERS","createFalsableFormatter","identity","input","createPlugin","optionRefiners","views","list","buttonTextKey","month","day","year","listDay","type","duration","days","weekday","listWeek","weeks","listMonth","listYear"],"sources":["D:\\Nus\\sem2\\IT5007\\Project\\hido-main\\node_modules\\@fullcalendar\\list\\src\\ListViewHeaderRow.tsx","D:\\Nus\\sem2\\IT5007\\Project\\hido-main\\node_modules\\@fullcalendar\\list\\src\\ListViewEventRow.tsx","D:\\Nus\\sem2\\IT5007\\Project\\hido-main\\node_modules\\@fullcalendar\\list\\src\\ListView.tsx","D:\\Nus\\sem2\\IT5007\\Project\\hido-main\\node_modules\\@fullcalendar\\list\\src\\options.ts","D:\\Nus\\sem2\\IT5007\\Project\\hido-main\\node_modules\\@fullcalendar\\list\\src\\main.ts"],"sourcesContent":["import {\n  BaseComponent, DateMarker, createElement, DateRange, getDateMeta,\n  RenderHook, DayHeaderContentArg, getDayClassNames, formatDayString, Fragment, buildNavLinkAttrs, getUniqueDomId,\n} from '@fullcalendar/common'\n\nexport interface ListViewHeaderRowProps {\n  cellId: string\n  dayDate: DateMarker\n  todayRange: DateRange\n}\n\ninterface HookProps extends DayHeaderContentArg { // doesn't enforce much since DayCellContentArg allow extra props\n  textId: string // for aria-labelledby\n  text: string\n  sideText: string\n}\n\nexport class ListViewHeaderRow extends BaseComponent<ListViewHeaderRowProps> {\n  state = {\n    textId: getUniqueDomId(),\n  }\n\n  render() {\n    let { theme, dateEnv, options, viewApi } = this.context\n    let { cellId, dayDate, todayRange } = this.props\n    let { textId } = this.state\n    let dayMeta = getDateMeta(dayDate, todayRange)\n\n    // will ever be falsy?\n    let text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : ''\n\n    // will ever be falsy? also, BAD NAME \"alt\"\n    let sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : ''\n\n    let hookProps: HookProps = {\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      textId,\n      text,\n      sideText,\n      navLinkAttrs: buildNavLinkAttrs(this.context, dayDate),\n      sideNavLinkAttrs: buildNavLinkAttrs(this.context, dayDate, 'day', false),\n      ...dayMeta,\n    }\n\n    let classNames = ['fc-list-day'].concat(\n      getDayClassNames(dayMeta, theme),\n    )\n\n    // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n    return (\n      <RenderHook<HookProps>\n        hookProps={hookProps}\n        classNames={options.dayHeaderClassNames}\n        content={options.dayHeaderContent}\n        defaultContent={renderInnerContent}\n        didMount={options.dayHeaderDidMount}\n        willUnmount={options.dayHeaderWillUnmount}\n      >\n        {(rootElRef, customClassNames, innerElRef, innerContent) => (\n          <tr\n            ref={rootElRef}\n            className={classNames.concat(customClassNames).join(' ')}\n            data-date={formatDayString(dayDate)}\n          >\n            {/* TODO: force-hide top border based on :first-child */}\n            <th scope=\"colgroup\" colSpan={3} id={cellId} aria-labelledby={textId}>\n              <div className={'fc-list-day-cushion ' + theme.getClass('tableCellShaded')} ref={innerElRef}>\n                {innerContent}\n              </div>\n            </th>\n          </tr>\n        )}\n      </RenderHook>\n    )\n  }\n}\n\nfunction renderInnerContent(props: HookProps) {\n  return (\n    <Fragment>\n      {props.text && (\n        <a id={props.textId} className=\"fc-list-day-text\" {...props.navLinkAttrs}>\n          {props.text}\n        </a>\n      )}\n      {props.sideText && (/* not keyboard tabbable */\n        <a aria-hidden className=\"fc-list-day-side-text\" {...props.sideNavLinkAttrs}>\n          {props.sideText}\n        </a>\n      )}\n    </Fragment>\n  )\n}\n","import {\n  MinimalEventProps, BaseComponent, ViewContext, createElement, AllDayContentArg,\n  Seg, isMultiDayRange, DateFormatter, buildSegTimeText, createFormatter, EventRoot, ComponentChildren, RenderHook, getSegAnchorAttrs,\n} from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short',\n})\n\nexport interface ListViewEventRowProps extends MinimalEventProps {\n  timeHeaderId: string\n  eventHeaderId: string\n  dateHeaderId: string\n}\n\nexport class ListViewEventRow extends BaseComponent<ListViewEventRowProps> {\n  render() {\n    let { props, context } = this\n    let { seg, timeHeaderId, eventHeaderId, dateHeaderId } = props\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT\n\n    return (\n      <EventRoot\n        seg={seg}\n        timeText=\"\" // BAD. because of all-day content\n        disableDragging\n        disableResizing\n        defaultContent={() => renderEventInnerContent(seg, context) /* weird */}\n        isPast={props.isPast}\n        isFuture={props.isFuture}\n        isToday={props.isToday}\n        isSelected={props.isSelected}\n        isDragging={props.isDragging}\n        isResizing={props.isResizing}\n        isDateSelecting={props.isDateSelecting}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, hookProps) => (\n          <tr className={['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' ')} ref={rootElRef}>\n            {buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId)}\n            <td aria-hidden className=\"fc-list-event-graphic\">\n              <span className=\"fc-list-event-dot\" style={{ borderColor: hookProps.borderColor || hookProps.backgroundColor }} />\n            </td>\n            <td ref={innerElRef} headers={`${eventHeaderId} ${dateHeaderId}`} className=\"fc-list-event-title\">\n              {innerContent}\n            </td>\n          </tr>\n        )}\n      </EventRoot>\n    )\n  }\n}\n\nfunction renderEventInnerContent(seg: Seg, context: ViewContext) {\n  let interactiveAttrs = getSegAnchorAttrs(seg, context)\n  return (\n    <a {...interactiveAttrs}>\n      {/* TODO: document how whole row become clickable */}\n      {seg.eventRange.def.title}\n    </a>\n  )\n}\n\nfunction buildTimeContent(\n  seg: Seg,\n  timeFormat: DateFormatter,\n  context: ViewContext,\n  timeHeaderId: string,\n  dateHeaderId: string,\n): ComponentChildren {\n  let { options } = context\n\n  if (options.displayEventTime !== false) {\n    let eventDef = seg.eventRange.def\n    let eventInstance = seg.eventRange.instance\n    let doAllDay = false\n    let timeText: string\n\n    if (eventDef.allDay) {\n      doAllDay = true\n    } else if (isMultiDayRange(seg.eventRange.range)) { // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          eventInstance.range.start,\n          seg.end,\n        )\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          seg.start,\n          eventInstance.range.end,\n        )\n      } else {\n        doAllDay = true\n      }\n    } else {\n      timeText = buildSegTimeText(\n        seg,\n        timeFormat,\n        context,\n      )\n    }\n\n    if (doAllDay) {\n      let hookProps: AllDayContentArg = {\n        text: context.options.allDayText,\n        view: context.viewApi,\n      }\n\n      return (\n        <RenderHook<AllDayContentArg> // needed?\n          hookProps={hookProps}\n          classNames={options.allDayClassNames}\n          content={options.allDayContent}\n          defaultContent={renderAllDayInner}\n          didMount={options.allDayDidMount}\n          willUnmount={options.allDayWillUnmount}\n        >\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <td ref={rootElRef} headers={`${timeHeaderId} ${dateHeaderId}`} className={['fc-list-event-time'].concat(classNames).join(' ')}>\n              {innerContent}\n            </td>\n          )}\n        </RenderHook>\n      )\n    }\n\n    return (\n      <td className=\"fc-list-event-time\">\n        {timeText}\n      </td>\n    )\n  }\n\n  return null\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n","import {\n  createElement,\n  ViewProps,\n  Scroller,\n  DateMarker,\n  addDays,\n  startOfDay,\n  DateRange,\n  intersectRanges,\n  DateProfile,\n  EventUiHash,\n  EventRenderRange,\n  sliceEventStore,\n  EventStore,\n  memoize,\n  Seg,\n  VNode,\n  sortEventSegs,\n  getSegMeta,\n  NowTimer,\n  ViewRoot,\n  RenderHook,\n  DateComponent,\n  ViewApi,\n  MountArg,\n  getUniqueDomId,\n  formatDayString,\n} from '@fullcalendar/common'\nimport { ListViewHeaderRow } from './ListViewHeaderRow'\nimport { ListViewEventRow } from './ListViewEventRow'\n\nexport interface NoEventsContentArg {\n  text: string\n  view: ViewApi\n}\n\nexport type NoEventsMountArg = MountArg<NoEventsContentArg>\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\nexport class ListView extends DateComponent<ViewProps> {\n  private computeDateVars = memoize(computeDateVars)\n  private eventStoreToSegs = memoize(this._eventStoreToSegs)\n  state = {\n    timeHeaderId: getUniqueDomId(),\n    eventHeaderId: getUniqueDomId(),\n    dateHeaderIdRoot: getUniqueDomId(),\n  }\n\n  render() {\n    let { props, context } = this\n\n    let extraClassNames = [\n      'fc-list',\n      context.theme.getClass('table'), // just for the outer border. will be on div\n      context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : '',\n    ]\n\n    let { dayDates, dayRanges } = this.computeDateVars(props.dateProfile)\n    let eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges)\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.setRootEl}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={extraClassNames.concat(classNames).join(' ')}>\n            <Scroller\n              liquid={!props.isHeightAuto}\n              overflowX={props.isHeightAuto ? 'visible' : 'hidden'}\n              overflowY={props.isHeightAuto ? 'visible' : 'auto'}\n            >\n              {eventSegs.length > 0 ?\n                this.renderSegList(eventSegs, dayDates) :\n                this.renderEmptyMessage()}\n            </Scroller>\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  setRootEl = (rootEl: HTMLDivElement | null) => {\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, { // TODO: make aware that it doesn't do Hits\n        el: rootEl,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  renderEmptyMessage() {\n    let { options, viewApi } = this.context\n    let hookProps: NoEventsContentArg = {\n      text: options.noEventsText,\n      view: viewApi,\n    }\n\n    return (\n      <RenderHook<NoEventsContentArg> // needed???\n        hookProps={hookProps}\n        classNames={options.noEventsClassNames}\n        content={options.noEventsContent}\n        defaultContent={renderNoEventsInner}\n        didMount={options.noEventsDidMount}\n        willUnmount={options.noEventsWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div className={['fc-list-empty'].concat(classNames).join(' ')} ref={rootElRef}>\n            <div className=\"fc-list-empty-cushion\" ref={innerElRef}>\n              {innerContent}\n            </div>\n          </div>\n        )}\n      </RenderHook>\n    )\n  }\n\n  renderSegList(allSegs: Seg[], dayDates: DateMarker[]) {\n    let { theme, options } = this.context\n    let { timeHeaderId, eventHeaderId, dateHeaderIdRoot } = this.state\n    let segsByDay = groupSegsByDay(allSegs) // sparse array\n\n    return (\n      <NowTimer unit=\"day\">\n        {(nowDate: DateMarker, todayRange: DateRange) => {\n          let innerNodes: VNode[] = []\n\n          for (let dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n            let daySegs = segsByDay[dayIndex]\n\n            if (daySegs) { // sparse array, so might be undefined\n              let dayStr = formatDayString(dayDates[dayIndex])\n              let dateHeaderId = dateHeaderIdRoot + '-' + dayStr\n\n              // append a day header\n              innerNodes.push(\n                <ListViewHeaderRow\n                  key={dayStr}\n                  cellId={dateHeaderId}\n                  dayDate={dayDates[dayIndex]}\n                  todayRange={todayRange}\n                />,\n              )\n\n              daySegs = sortEventSegs(daySegs, options.eventOrder)\n\n              for (let seg of daySegs) {\n                innerNodes.push(\n                  <ListViewEventRow\n                    key={dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */}\n                    seg={seg}\n                    isDragging={false}\n                    isResizing={false}\n                    isDateSelecting={false}\n                    isSelected={false}\n                    timeHeaderId={timeHeaderId}\n                    eventHeaderId={eventHeaderId}\n                    dateHeaderId={dateHeaderId}\n                    {...getSegMeta(seg, todayRange, nowDate)}\n                  />,\n                )\n              }\n            }\n          }\n\n          return (\n            <table className={'fc-list-table ' + theme.getClass('table')}>\n              <thead>\n                <tr>\n                  <th scope=\"col\" id={timeHeaderId}>{options.timeHint}</th>\n                  <th scope=\"col\" aria-hidden />\n                  <th scope=\"col\" id={eventHeaderId}>{options.eventHint}</th>\n                </tr>\n              </thead>\n              <tbody>{innerNodes}</tbody>\n            </table>\n          )\n        }}\n      </NowTimer>\n    )\n  }\n\n  _eventStoreToSegs(eventStore: EventStore, eventUiBases: EventUiHash, dayRanges: DateRange[]): Seg[] {\n    return this.eventRangesToSegs(\n      sliceEventStore(\n        eventStore,\n        eventUiBases,\n        this.props.dateProfile.activeRange,\n        this.context.options.nextDayThreshold,\n      ).fg,\n      dayRanges,\n    )\n  }\n\n  eventRangesToSegs(eventRanges: EventRenderRange[], dayRanges: DateRange[]) {\n    let segs = []\n\n    for (let eventRange of eventRanges) {\n      segs.push(...this.eventRangeToSegs(eventRange, dayRanges))\n    }\n\n    return segs\n  }\n\n  eventRangeToSegs(eventRange: EventRenderRange, dayRanges: DateRange[]) {\n    let { dateEnv } = this.context\n    let { nextDayThreshold } = this.context.options\n    let range = eventRange.range\n    let allDay = eventRange.def.allDay\n    let dayIndex\n    let segRange\n    let seg\n    let segs = []\n\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex])\n\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex,\n        }\n\n        segs.push(seg)\n\n        // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n        if (\n          !seg.isEnd && !allDay &&\n          dayIndex + 1 < dayRanges.length &&\n          range.end <\n            dateEnv.add(\n              dayRanges[dayIndex + 1].start,\n              nextDayThreshold,\n            )\n        ) {\n          seg.end = range.end\n          seg.isEnd = true\n          break\n        }\n      }\n    }\n\n    return segs\n  }\n}\n\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text\n}\n\nfunction computeDateVars(dateProfile: DateProfile) {\n  let dayStart = startOfDay(dateProfile.renderRange.start)\n  let viewEnd = dateProfile.renderRange.end\n  let dayDates: DateMarker[] = []\n  let dayRanges: DateRange[] = []\n\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart)\n\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1),\n    })\n\n    dayStart = addDays(dayStart, 1)\n  }\n\n  return { dayDates, dayRanges }\n}\n\n// Returns a sparse array of arrays, segs grouped by their dayIndex\nfunction groupSegsByDay(segs): Seg[][] {\n  let segsByDay = [] // sparse array\n  let i\n  let seg\n\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))\n      .push(seg)\n  }\n\n  return segsByDay\n}\n","import {\n  identity,\n  Identity,\n  ClassNamesGenerator,\n  CustomContentGenerator,\n  DidMountHandler,\n  WillUnmountHandler,\n  createFormatter,\n  FormatterInput,\n} from '@fullcalendar/common'\n\n// public\nimport {\n  NoEventsContentArg,\n  NoEventsMountArg,\n} from './api-type-deps'\n\nexport const OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter, // defaults specified in list plugins\n  listDaySideFormat: createFalsableFormatter, // \"\n\n  noEventsClassNames: identity as Identity<ClassNamesGenerator<NoEventsContentArg>>,\n  noEventsContent: identity as Identity<CustomContentGenerator<NoEventsContentArg>>,\n  noEventsDidMount: identity as Identity<DidMountHandler<NoEventsMountArg>>,\n  noEventsWillUnmount: identity as Identity<WillUnmountHandler<NoEventsMountArg>>,\n\n  // noEventsText is defined in base options\n}\n\nfunction createFalsableFormatter(input: FormatterInput | false) {\n  return input === false ? null : createFormatter(input)\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { ListView } from './ListView'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { ListView }\nexport * from './api-type-deps'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    list: {\n      component: ListView,\n      buttonTextKey: 'list', // what to lookup in locale files\n      listDayFormat: { month: 'long', day: 'numeric', year: 'numeric' }, // like \"January 1, 2016\"\n    },\n\n    listDay: {\n      type: 'list',\n      duration: { days: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is all we need. full date is probably in headerToolbar\n    },\n\n    listWeek: {\n      type: 'list',\n      duration: { weeks: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is more important\n      listDaySideFormat: { month: 'long', day: 'numeric', year: 'numeric' },\n    },\n\n    listMonth: {\n      type: 'list',\n      duration: { month: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n    listYear: {\n      type: 'list',\n      duration: { year: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}