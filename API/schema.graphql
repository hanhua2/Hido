scalar GraphQLDate
type User {
  id: ID!
  lastname: String!
  firstname: String!
  email: String!
  password: String!
  created: String!
}

input RegisterInput {
  lastname: String!
  firstname: String!
  email: String!
  password: String!
  confirmPassword: String!
}

type Task {
  date: GraphQLDate!
  name: String!
  color: String!
  status: String
  priority: String!
  comment: String!
  id: String!
}

input TaskInput {
  date: GraphQLDate!
  name: String!
  color: String!
  status: String!
  priority: String!
  comment: String!
  id: String!
}

type Query {
  about: String!
  taskList: [Task!]!
  userList: [User!]!
}

type Mutation {
  setAboutMessage(message: String!): String
  registeruser(registerInput: RegisterInput): User!
  login(email: String!, password: String!): User!
  taskAdd(task: TaskInput!): Task!
  taskDelete(taskID: String!): Task!
  taskUpdate(task : TaskInput!): Task!
}
