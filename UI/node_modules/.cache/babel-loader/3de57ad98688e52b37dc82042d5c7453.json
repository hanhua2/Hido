{"ast":null,"code":"var _jsxFileName = \"/home/baymax/hido/UI/src/context/CalendarContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SET_DATE = \"SET_DATE\";\nconst SET_TASK = \"SET_TASK\";\nconst SAVE_TASK = \"SAVE_TASK\";\nconst DELETE_TASK = \"DELETE_TASK\";\nconst dateRegex = new RegExp('^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d');\n\nfunction jsonDateReviver(key, value) {\n  if (dateRegex.test(value)) return new Date(value);\n  return value;\n}\n\nasync function graphQLFetch(query) {\n  let variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  try {\n    const response = await fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query,\n        variables\n      })\n    });\n    const body = await response.text();\n    const result = JSON.parse(body, jsonDateReviver);\n\n    if (result.errors) {\n      const error = result.errors[0];\n\n      if (error.extensions.code === 'BAD_USER_INPUT') {\n        const details = error.extensions.exception.errors.join('\\n ');\n        alert(`${error.message}:\\n ${details}`);\n      } else {\n        alert(`${error.extensions.code}: ${error.message}`);\n      }\n    }\n\n    return result.data;\n  } catch (e) {\n    alert(`Error in sending data to server: ${e.message}`);\n  }\n}\n\nconst getDatabase = async () => {\n  const query = `query {\n    taskList {\n      date, name, color, status, priority, comment, id,\n    }\n  }`;\n  const data = await graphQLFetch(query);\n  let db = data.taskList;\n  db.map(task => task.date = new Date(task.date));\n  return db;\n};\n\nasync function taskAdd(task) {\n  const query = `mutation myMutation($task:TaskInput!){\n    taskAdd(task: $task) {\n      id \n      name \n      priority\n    }\n  }`;\n  const data = await graphQLFetch(query, {\n    task\n  });\n}\n\nasync function taskDelete(taskID) {\n  const query = `mutation myMutation($taskID:String!){\n    taskDelete(taskID: $taskID) {\n    name\n    id }\n  }`;\n  const data = await graphQLFetch(query, {\n    taskID\n  });\n}\n\nasync function taskUpdate(task) {\n  const query = `mutation myMutation($task:TaskInput!){\n    taskUpdate(task: $task) {\n      id \n      name \n      priority\n    }\n  }`;\n  const data = await graphQLFetch(query, {\n    task\n  });\n}\n/*\nconst getDatabase = ()=> {  \n  let db = localStorage.getItem(\"$calendar_db\");\n  \n  if(!db) {\n    db = [];\n    setDatabase(db);\n  } else {\n    db = JSON.parse(db);    \n    db.map(task=> task.date = new Date(task.date));\n  } \n  return db;\n} */\n\n/*\nconst setDatabase = (db)=> {\n  localStorage.setItem(\"$calendar_db\", JSON.stringify(db));\n} */\n\n\nexport const CalendarContext = /*#__PURE__*/createContext();\nexport const sameDay = (a, b) => {\n  return a.getDate() === b.getDate() && a.getMonth() === b.getMonth() && a.getFullYear() === b.getFullYear();\n};\n\nfunction CalendarState(props) {\n  _s();\n\n  const initialState = {\n    date: new Date(),\n    days: [],\n    task: null\n  };\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case SET_DATE:\n        // Set current date\n        const date = action.payload.date;\n        const db = action.payload.db; // Calendar Start Day\n\n        const d1 = new Date(date.getFullYear(), date.getMonth(), 1);\n        d1.setDate(d1.getDate() - (d1.getDay() === 0 ? 7 : d1.getDay())); // Calendart End Day\n\n        const d2 = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n        if (d2.getDay() !== 0) d2.setDate(d2.getDate() + (7 - d2.getDay()));\n        const days = [];\n\n        do {\n          // Obtain tasks\n          d1.setDate(d1.getDate() + 1); // iterate            \n\n          days.push({\n            date: new Date(d1.getTime()),\n            tasks: db.filter(task => sameDay(d1, task.date))\n          });\n        } while (!sameDay(d1, d2));\n\n        return { // Update state\n          ...state,\n          date: date,\n          days: days\n        };\n\n      case SET_TASK:\n        return { ...state,\n          task: action.payload\n        };\n\n      case SAVE_TASK:\n        {\n          let db = action.payload.db;\n          const task = action.payload.task;\n\n          if (!task.id) {\n            // new Task\n            task.id = uuidv4();\n            db.push(task);\n          } else {\n            db = db.map(t => {\n              return t.id === task.id ? task : t;\n            });\n          } //setDatabase(db);\n\n\n          return { ...state\n          };\n        }\n\n      case DELETE_TASK:\n        {\n          let db = action.payload.db;\n          const taskID = action.payload.taskID;\n          db = db.filter(task => {\n            return task.id !== taskID;\n          }); //setDatabase(db);\n\n          return { ...state\n          };\n        }\n\n      default:\n        break;\n    }\n  }, initialState);\n\n  async function setDate(date) {\n    const db = await getDatabase();\n    dispatch({\n      type: SET_DATE,\n      payload: {\n        date: date,\n        db: db\n      }\n    });\n  }\n\n  function setTask(task) {\n    dispatch({\n      type: SET_TASK,\n      payload: task\n    });\n  }\n\n  async function saveTask(task) {\n    const db = await getDatabase();\n    dispatch({\n      type: SAVE_TASK,\n      payload: {\n        task: task,\n        db: db\n      }\n    });\n\n    if (db.filter(tk => {\n      return tk.id === task.id;\n    })) {\n      await taskUpdate(task);\n    } else {\n      await taskAdd(task);\n    }\n  }\n\n  async function deleteTask(taskId) {\n    const db = await getDatabase();\n    dispatch({\n      type: DELETE_TASK,\n      payload: {\n        taskId: taskId,\n        db: db\n      }\n    });\n    await taskDelete(taskId);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CalendarContext.Provider, {\n    value: {\n      date: state.date,\n      days: state.days,\n      task: state.task,\n      setDate,\n      setTask,\n      saveTask,\n      deleteTask\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CalendarState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = CalendarState;\nexport default CalendarState;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarState\");","map":{"version":3,"sources":["/home/baymax/hido/UI/src/context/CalendarContext.js"],"names":["React","createContext","useReducer","v4","uuidv4","SET_DATE","SET_TASK","SAVE_TASK","DELETE_TASK","dateRegex","RegExp","jsonDateReviver","key","value","test","Date","graphQLFetch","query","variables","response","fetch","method","headers","body","JSON","stringify","text","result","parse","errors","error","extensions","code","details","exception","join","alert","message","data","e","getDatabase","db","taskList","map","task","date","taskAdd","taskDelete","taskID","taskUpdate","CalendarContext","sameDay","a","b","getDate","getMonth","getFullYear","CalendarState","props","initialState","days","state","dispatch","action","type","payload","d1","setDate","getDay","d2","push","getTime","tasks","filter","id","t","setTask","saveTask","tk","deleteTask","taskId","children"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst SET_DATE = \"SET_DATE\";\nconst SET_TASK = \"SET_TASK\";\nconst SAVE_TASK = \"SAVE_TASK\";\nconst DELETE_TASK = \"DELETE_TASK\";\n\nconst dateRegex = new RegExp('^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d');\n\nfunction jsonDateReviver(key, value) {\n  if (dateRegex.test(value)) return new Date(value);\n  return value;\n}\n\n\nasync function graphQLFetch(query, variables = {}) {\n  try {\n    const response = await fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json'},\n      body: JSON.stringify({ query, variables })\n    });\n    const body = await response.text();\n    const result = JSON.parse(body, jsonDateReviver);\n\n    if (result.errors) {\n      const error = result.errors[0];\n      if (error.extensions.code === 'BAD_USER_INPUT') {\n        const details = error.extensions.exception.errors.join('\\n ');\n        alert(`${error.message}:\\n ${details}`);\n      } else {\n        alert(`${error.extensions.code}: ${error.message}`);\n      }\n    }\n    return result.data;\n  } catch (e) {\n    alert(`Error in sending data to server: ${e.message}`);\n  }\n}\n\nconst getDatabase = async ()=> {\n  const query = `query {\n    taskList {\n      date, name, color, status, priority, comment, id,\n    }\n  }`\n  const data = await graphQLFetch(query);\n  let db = data.taskList;\n  db.map(task=> task.date = new Date(task.date));\n  return db;\n}\n\nasync function taskAdd(task) {\n  const query = `mutation myMutation($task:TaskInput!){\n    taskAdd(task: $task) {\n      id \n      name \n      priority\n    }\n  }`\n  const data = await graphQLFetch(query, {task});\n}\n\nasync function taskDelete(taskID) {\n  const query = `mutation myMutation($taskID:String!){\n    taskDelete(taskID: $taskID) {\n    name\n    id }\n  }`\n  const data = await graphQLFetch(query, {taskID});\n}\n\n\nasync function taskUpdate(task) {\n  const query = `mutation myMutation($task:TaskInput!){\n    taskUpdate(task: $task) {\n      id \n      name \n      priority\n    }\n  }`\n  const data = await graphQLFetch(query, {task});\n}\n\n/*\nconst getDatabase = ()=> {  \n  let db = localStorage.getItem(\"$calendar_db\");\n  \n  if(!db) {\n    db = [];\n    setDatabase(db);\n  } else {\n    db = JSON.parse(db);    \n    db.map(task=> task.date = new Date(task.date));\n  } \n  return db;\n} */\n\n/*\nconst setDatabase = (db)=> {\n  localStorage.setItem(\"$calendar_db\", JSON.stringify(db));\n} */\n\nexport const CalendarContext = createContext();\n\nexport const sameDay = (a, b) => {\n  return a.getDate()     === b.getDate()\n      && a.getMonth()    === b.getMonth()\n      && a.getFullYear() === b.getFullYear();\n}\n\n\nfunction CalendarState(props) {\n  \n  \n  const initialState = {\n    date: new Date(),\n    days: [],\n    task: null\n  };\n\n  \n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case SET_DATE: // Set current date\n        const date = action.payload.date;\n        const db = action.payload.db;\n        // Calendar Start Day\n        const d1 = new Date(date.getFullYear(), date.getMonth()    , 1);\n        d1.setDate(d1.getDate() - (d1.getDay() === 0 ? 7 : d1.getDay()));\n        // Calendart End Day\n        const d2 = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n        if(d2.getDay() !== 0) d2.setDate(d2.getDate() + (7 - d2.getDay()));\n        const days = [];\n        do { // Obtain tasks\n          d1.setDate(d1.getDate() + 1); // iterate            \n          days.push({\n            date: new Date(d1.getTime()),\n            tasks: db.filter((task)=> sameDay(d1, task.date))\n          });\n        } while(!sameDay(d1, d2));\n      \n        return { // Update state\n          ...state,\n          date: date,\n          days: days\n        }\n      case SET_TASK: \n        return {\n          ...state,\n          task: action.payload\n        }\n\n      case SAVE_TASK: {\n        let db = action.payload.db;\n        const task = action.payload.task;\n        if(!task.id) { // new Task\n          task.id = uuidv4();\n          db.push(task);\n        } else {\n          db = db.map(t=> {\n            return t.id === task.id ? task : t;\n          })\n        }\n        //setDatabase(db);\n        return {\n          ...state\n        }\n      }\n      case DELETE_TASK : {\n        let db = action.payload.db;\n        const taskID = action.payload.taskID;\n        db = db.filter((task)=> {\n          return task.id !== taskID;\n        });\n        //setDatabase(db);\n        return {\n          ...state,\n        }\n      }\n      default:\n        break;\n    }\n  }, initialState);\n\n\n  async function setDate(date) {\n    const db = await getDatabase();\n    dispatch({\n      type: SET_DATE,\n      payload: {date: date, db: db}\n    });\n  }\n\n  function setTask(task) {\n    dispatch({\n      type: SET_TASK,\n      payload: task\n    });\n  }\n\n  async function saveTask(task) {\n    const db = await getDatabase();\n    dispatch({\n      type: SAVE_TASK,\n      payload: {task: task, db: db}\n    })\n    if (db.filter((tk)=> {\n      return tk.id === task.id;\n    })) {\n      await taskUpdate(task);\n    } else {\n      await taskAdd(task);\n    }\n    \n  }\n\n  async function deleteTask(taskId) {\n    const db = await getDatabase();\n    dispatch({\n      type: DELETE_TASK,\n      payload: {taskId: taskId, db: db}\n    })\n    await taskDelete(taskId);\n  }\n  \n  return (\n    <CalendarContext.Provider\n      value={{\n\n        date: state.date,\n        days: state.days,\n        task: state.task,\n\n        setDate,\n        setTask,\n        saveTask,\n        deleteTask\n      }}\n    >\n      {props.children}\n    </CalendarContext.Provider>\n  );\n}\n\nexport default CalendarState;"]},"metadata":{},"sourceType":"module"}